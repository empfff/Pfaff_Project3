runExample("02_text")
library(tidyverse)
library(shiny)
ui <- fluidPage(
)
server <- function(input, output, session) {
}
shinyApp(ui, server))
library(shiny)
runExample("02_text")
subsetbycity("Durham")
library(tm)
#ACTION: SWITCH TO GENERIC PATH AND DELETE THIS COMMENT
files <- dir("C:/Users/epfaff/Documents/GitHub/Pfaff_Project3/data", pattern = "\\.txt$", full.names = TRUE)
#write a function to subset the abstracts to just those that mention one of the collaborating cities, one city at a time
subsetbycity <- function(thecity) {
#write a function to convert city names into regex for use in the for loop below.
citytoregex <- function(cityname) {
switch(cityname,
"Boston" = "(Boston)",
"Durham" = "(Durham)",
"New York" = "(New\\s?York,\\s?(NY|New\\sYork)|Bronx)",
"Houston" = "(Houston)",
"Seattle" = "(Seattle)",
"Chicago" = "(Chicago)",
"Los Angeles" = "(Los\\s?Angeles)",
"Philadelphia" = "(Philadelphia)",
"Bethesda" = "(Bethesda)",
"Rochester" = "(Rochester)"
)
}
abstractcount = 1
#subset the abstracts
sepabstracts<-vector("list")
for (i in 1:length(files)) {
matchedabstract <- sum(str_count(read_lines(files[i]),citytoregex(thecity)))
if(matchedabstract>0) {
sepabstracts[[abstractcount]] <- read_lines(files[i])
abstractcount = abstractcount + 1
}
}
#unlist the subset and concatenate them into a single string
vectorabs <- unlist(sepabstracts)
concatabs <- paste(vectorabs, collapse = '')
#use the tm package to count terms in the subset
docs <- Corpus(VectorSource(concatabs))
#convert to lowercase
docs <- tm_map(docs, content_transformer(tolower))
# Remove numbers
docs <- tm_map(docs, removeNumbers)
# Remove english common stopwords
docs <- tm_map(docs, removeWords, stopwords("english"))
# Remove your own stop word
# specify your stopwords as a character vector
docs <- tm_map(docs, removeWords, c("university","center","medical","research","institute","school","department","usa",
"north","carolina","houston","boston","new","york","college","chapel","hill","national",
"texas","baylor","doi","durham","duke","united","division","public","sciences","san",
"washington","seattle","chicago","los","angeles","california","comprehensive",
"philadelphia","bethesda","rochester","mayo","clinic","alliance","epub","harvard",
"massachusetts"))
# Remove punctuations
docs <- tm_map(docs, removePunctuation)
# Eliminate extra white spaces
docs <- tm_map(docs, stripWhitespace)
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
terms<-head(d, 20)
#write output to file
#ACTION: SWITCH TO GENERIC PATH AND DELETE THIS COMMENT
mypath <- paste("C:/Users/epfaff/Documents/GitHub/Pfaff_Project3/wordCounts_",thecity,".csv",sep="") #this doesn't work right now
write.csv(terms,mypath)
}
subsetbycity("Durham")
library(tm)
#ACTION: SWITCH TO GENERIC PATH AND DELETE THIS COMMENT
files <- dir("C:/Users/epfaff/Documents/GitHub/Pfaff_Project3/data", pattern = "\\.txt$", full.names = TRUE)
#write a function to subset the abstracts to just those that mention one of the collaborating cities, one city at a time
subsetbycity <- function(thecity) {
#write a function to convert city names into regex for use in the for loop below.
citytoregex <- function(cityname) {
switch(cityname,
"Boston" = "(Boston)",
"Durham" = "(Durham)",
"New York" = "(New\\s?York,\\s?(NY|New\\sYork)|Bronx)",
"Houston" = "(Houston)",
"Seattle" = "(Seattle)",
"Chicago" = "(Chicago)",
"Los Angeles" = "(Los\\s?Angeles)",
"Philadelphia" = "(Philadelphia)",
"Bethesda" = "(Bethesda)",
"Rochester" = "(Rochester)"
)
}
abstractcount = 1
#subset the abstracts
sepabstracts<-vector("list")
for (i in 1:length(files)) {
matchedabstract <- sum(str_count(read_lines(files[i]),citytoregex(thecity)))
if(matchedabstract>0) {
sepabstracts[[abstractcount]] <- read_lines(files[i])
abstractcount = abstractcount + 1
}
}
#unlist the subset and concatenate them into a single string
vectorabs <- unlist(sepabstracts)
concatabs <- paste(vectorabs, collapse = '')
#use the tm package to count terms in the subset
docs <- Corpus(VectorSource(concatabs))
#convert to lowercase
docs <- tm_map(docs, content_transformer(tolower))
# Remove numbers
docs <- tm_map(docs, removeNumbers)
# Remove english common stopwords
docs <- tm_map(docs, removeWords, stopwords("english"))
# Remove your own stop word
# specify your stopwords as a character vector
docs <- tm_map(docs, removeWords, c("university","center","medical","research","institute","school","department","usa",
"north","carolina","houston","boston","new","york","college","chapel","hill","national",
"texas","baylor","doi","durham","duke","united","division","public","sciences","san",
"washington","seattle","chicago","los","angeles","california","comprehensive",
"philadelphia","bethesda","rochester","mayo","clinic","alliance","epub","harvard",
"massachusetts"))
# Remove punctuations
docs <- tm_map(docs, removePunctuation)
# Eliminate extra white spaces
docs <- tm_map(docs, stripWhitespace)
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
terms<-head(d, 20)
#write output to file
#ACTION: SWITCH TO GENERIC PATH AND DELETE THIS COMMENT
mypath <- paste("C:/Users/epfaff/Documents/GitHub/Pfaff_Project3/wordCounts_",thecity,".csv",sep="") #this doesn't work right now
write.csv(terms,mypath)
}
subsetbycity("New York")
runApp("C:/Users/epfaff/Documents/GitHub/Pfaff_Project3/dashboard")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ggplot(plotData) +
geom_bar(mapping=aes(x=word,y=freq),fill="cyan4") +
labs(x = "Age (years)", title = "Histogram of Victim Age")
plotData <- datasetPlotInput()
ggplot(plotData) +
geom_bar(mapping=aes(x=word,y=freq),fill="cyan4") +
labs(x = "Age (years)", title = "Histogram of Victim Age")
runApp()
runApp()
runApp()
runApp()
runApp()
?geom_bar
runApp()
library(tm)
#ACTION: SWITCH TO GENERIC PATH AND DELETE THIS COMMENT
files <- dir("C:/Users/epfaff/Documents/GitHub/Pfaff_Project3/data", pattern = "\\.txt$", full.names = TRUE)
#write a function to subset the abstracts to just those that mention one of the collaborating cities, one city at a time
subsetbycity <- function(thecity) {
#write a function to convert city names into regex for use in the for loop below.
citytoregex <- function(cityname) {
switch(cityname,
"Boston" = "(Boston)",
"Durham" = "(Durham)",
"New York" = "(New\\s?York,\\s?(NY|New\\sYork)|Bronx)",
"Houston" = "(Houston)",
"Seattle" = "(Seattle)",
"Chicago" = "(Chicago)",
"Los Angeles" = "(Los\\s?Angeles)",
"Philadelphia" = "(Philadelphia)",
"Bethesda" = "(Bethesda)",
"Rochester" = "(Rochester)"
)
}
abstractcount = 1
#subset the abstracts
sepabstracts<-vector("list")
for (i in 1:length(files)) {
matchedabstract <- sum(str_count(read_lines(files[i]),citytoregex(thecity)))
if(matchedabstract>0) {
sepabstracts[[abstractcount]] <- read_lines(files[i])
abstractcount = abstractcount + 1
}
}
#unlist the subset and concatenate them into a single string
vectorabs <- unlist(sepabstracts)
concatabs <- paste(vectorabs, collapse = '')
#use the tm package to count terms in the subset
docs <- Corpus(VectorSource(concatabs))
#convert to lowercase
docs <- tm_map(docs, content_transformer(tolower))
# Remove numbers
docs <- tm_map(docs, removeNumbers)
# Remove english common stopwords
docs <- tm_map(docs, removeWords, stopwords("english"))
# Remove your own stop word
# specify your stopwords as a character vector
docs <- tm_map(docs, removeWords, c("university","center","medical","research","institute","school","department","usa",
"north","carolina","houston","boston","new","york","college","chapel","hill","national",
"texas","baylor","doi","durham","duke","united","division","public","sciences","san",
"washington","seattle","chicago","los","angeles","california","comprehensive",
"philadelphia","bethesda","rochester","mayo","clinic","alliance","epub","harvard",
"massachusetts"))
# Remove punctuations
docs <- tm_map(docs, removePunctuation)
# Eliminate extra white spaces
docs <- tm_map(docs, stripWhitespace)
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
terms<-head(d, 10)
#write output to file
#ACTION: SWITCH TO GENERIC PATH AND DELETE THIS COMMENT
mypath <- paste("C:/Users/epfaff/Documents/GitHub/Pfaff_Project3/wordCounts_",thecity,".csv",sep="") #this doesn't work right now
write.csv(terms,mypath)
}
subsetbycity("Boston")
library(tm)
#ACTION: SWITCH TO GENERIC PATH AND DELETE THIS COMMENT
files <- dir("C:/Users/epfaff/Documents/GitHub/Pfaff_Project3/data", pattern = "\\.txt$", full.names = TRUE)
#write a function to subset the abstracts to just those that mention one of the collaborating cities, one city at a time
subsetbycity <- function(thecity) {
#write a function to convert city names into regex for use in the for loop below.
citytoregex <- function(cityname) {
switch(cityname,
"Boston" = "(Boston)",
"Durham" = "(Durham)",
"New York" = "(New\\s?York,\\s?(NY|New\\sYork)|Bronx)",
"Houston" = "(Houston)",
"Seattle" = "(Seattle)",
"Chicago" = "(Chicago)",
"Los Angeles" = "(Los\\s?Angeles)",
"Philadelphia" = "(Philadelphia)",
"Bethesda" = "(Bethesda)",
"Rochester" = "(Rochester)"
)
}
abstractcount = 1
#subset the abstracts
sepabstracts<-vector("list")
for (i in 1:length(files)) {
matchedabstract <- sum(str_count(read_lines(files[i]),citytoregex(thecity)))
if(matchedabstract>0) {
sepabstracts[[abstractcount]] <- read_lines(files[i])
abstractcount = abstractcount + 1
}
}
#unlist the subset and concatenate them into a single string
vectorabs <- unlist(sepabstracts)
concatabs <- paste(vectorabs, collapse = '')
#use the tm package to count terms in the subset
docs <- Corpus(VectorSource(concatabs))
#convert to lowercase
docs <- tm_map(docs, content_transformer(tolower))
# Remove numbers
docs <- tm_map(docs, removeNumbers)
# Remove english common stopwords
docs <- tm_map(docs, removeWords, stopwords("english"))
# Remove your own stop word
# specify your stopwords as a character vector
docs <- tm_map(docs, removeWords, c("university","center","medical","research","institute","school","department","usa",
"north","carolina","houston","boston","new","york","college","chapel","hill","national",
"texas","baylor","doi","durham","duke","united","division","public","sciences","san",
"washington","seattle","chicago","los","angeles","california","comprehensive",
"philadelphia","bethesda","rochester","mayo","clinic","alliance","epub","harvard",
"massachusetts"))
# Remove punctuations
docs <- tm_map(docs, removePunctuation)
# Eliminate extra white spaces
docs <- tm_map(docs, stripWhitespace)
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
terms<-head(d, 10)
#write output to file
#ACTION: SWITCH TO GENERIC PATH AND DELETE THIS COMMENT
mypath <- paste("C:/Users/epfaff/Documents/GitHub/Pfaff_Project3/wordCounts_",thecity,".csv",sep="") #this doesn't work right now
write.csv(terms,mypath)
}
subsetbycity("Boston")
runApp()
runApp()
runApp()
runApp()
runApp()
?labs
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?read.csv
runApp()
runApp()
library(tm)
#ACTION: SWITCH TO GENERIC PATH AND DELETE THIS COMMENT
files <- dir("C:/Users/epfaff/Documents/GitHub/Pfaff_Project3/data", pattern = "\\.txt$", full.names = TRUE)
#write a function to subset the abstracts to just those that mention one of the collaborating cities, one city at a time
subsetbycity <- function(thecity) {
#write a function to convert city names into regex for use in the for loop below.
citytoregex <- function(cityname) {
switch(cityname,
"Boston" = "(Boston)",
"Durham" = "(Durham)",
"New York" = "(New\\s?York,\\s?(NY|New\\sYork)|Bronx)",
"Houston" = "(Houston)",
"Seattle" = "(Seattle)",
"Chicago" = "(Chicago)",
"Los Angeles" = "(Los\\s?Angeles)",
"Philadelphia" = "(Philadelphia)",
"Bethesda" = "(Bethesda)",
"Rochester" = "(Rochester)"
)
}
abstractcount = 1
#subset the abstracts
sepabstracts<-vector("list")
for (i in 1:length(files)) {
matchedabstract <- sum(str_count(read_lines(files[i]),citytoregex(thecity)))
if(matchedabstract>0) {
sepabstracts[[abstractcount]] <- read_lines(files[i])
abstractcount = abstractcount + 1
}
}
#unlist the subset and concatenate them into a single string
vectorabs <- unlist(sepabstracts)
concatabs <- paste(vectorabs, collapse = '')
#use the tm package to count terms in the subset
docs <- Corpus(VectorSource(concatabs))
#convert to lowercase
docs <- tm_map(docs, content_transformer(tolower))
# Remove numbers
docs <- tm_map(docs, removeNumbers)
# Remove english common stopwords
docs <- tm_map(docs, removeWords, stopwords("english"))
# Remove your own stop word
# specify your stopwords as a character vector
docs <- tm_map(docs, removeWords, c("university","center","medical","research","institute","school","department","usa",
"north","carolina","houston","boston","new","york","college","chapel","hill","national",
"texas","baylor","doi","durham","duke","united","division","public","sciences","san",
"washington","seattle","chicago","los","angeles","california","comprehensive",
"philadelphia","bethesda","rochester","mayo","clinic","alliance","epub","harvard",
"massachusetts"))
# Remove punctuations
docs <- tm_map(docs, removePunctuation)
# Eliminate extra white spaces
docs <- tm_map(docs, stripWhitespace)
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
d <- d[order(-freq)]
terms<-head(d, 10)
#write output to file
#ACTION: SWITCH TO GENERIC PATH AND DELETE THIS COMMENT
mypath <- paste("C:/Users/epfaff/Documents/GitHub/Pfaff_Project3/wordCounts_",thecity,".csv",sep="") #this doesn't work right now
write.csv(terms,mypath)
}
subsetbycity("Boston")
library(tm)
#ACTION: SWITCH TO GENERIC PATH AND DELETE THIS COMMENT
files <- dir("C:/Users/epfaff/Documents/GitHub/Pfaff_Project3/data", pattern = "\\.txt$", full.names = TRUE)
#write a function to subset the abstracts to just those that mention one of the collaborating cities, one city at a time
subsetbycity <- function(thecity) {
#write a function to convert city names into regex for use in the for loop below.
citytoregex <- function(cityname) {
switch(cityname,
"Boston" = "(Boston)",
"Durham" = "(Durham)",
"New York" = "(New\\s?York,\\s?(NY|New\\sYork)|Bronx)",
"Houston" = "(Houston)",
"Seattle" = "(Seattle)",
"Chicago" = "(Chicago)",
"Los Angeles" = "(Los\\s?Angeles)",
"Philadelphia" = "(Philadelphia)",
"Bethesda" = "(Bethesda)",
"Rochester" = "(Rochester)"
)
}
abstractcount = 1
#subset the abstracts
sepabstracts<-vector("list")
for (i in 1:length(files)) {
matchedabstract <- sum(str_count(read_lines(files[i]),citytoregex(thecity)))
if(matchedabstract>0) {
sepabstracts[[abstractcount]] <- read_lines(files[i])
abstractcount = abstractcount + 1
}
}
#unlist the subset and concatenate them into a single string
vectorabs <- unlist(sepabstracts)
concatabs <- paste(vectorabs, collapse = '')
#use the tm package to count terms in the subset
docs <- Corpus(VectorSource(concatabs))
#convert to lowercase
docs <- tm_map(docs, content_transformer(tolower))
# Remove numbers
docs <- tm_map(docs, removeNumbers)
# Remove english common stopwords
docs <- tm_map(docs, removeWords, stopwords("english"))
# Remove your own stop word
# specify your stopwords as a character vector
docs <- tm_map(docs, removeWords, c("university","center","medical","research","institute","school","department","usa",
"north","carolina","houston","boston","new","york","college","chapel","hill","national",
"texas","baylor","doi","durham","duke","united","division","public","sciences","san",
"washington","seattle","chicago","los","angeles","california","comprehensive",
"philadelphia","bethesda","rochester","mayo","clinic","alliance","epub","harvard",
"massachusetts"))
# Remove punctuations
docs <- tm_map(docs, removePunctuation)
# Eliminate extra white spaces
docs <- tm_map(docs, stripWhitespace)
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
terms<-head(d, 10)
#write output to file
#ACTION: SWITCH TO GENERIC PATH AND DELETE THIS COMMENT
mypath <- paste("C:/Users/epfaff/Documents/GitHub/Pfaff_Project3/wordCounts_",thecity,".csv",sep="") #this doesn't work right now
write.csv(terms,mypath)
}
subsetbycity("Boston")
runApp()
